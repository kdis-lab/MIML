/*    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package miml.classifiers.ml;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import mulan.classifier.clus.ClusWrapperClassification;
import mulan.data.MultiLabelInstances;

/**
 * This class is a wrapper for RFPCT implemented in the clus library
 * <a href="https://dtai.cs.kuleuven.be/clus/">CLUS</a> library.
 * 
 * @author Eleftherios Spyromitros-Xioufis
 * @version 2013.04.01
 * 
 */

public class RFPCT extends ClusWrapperClassification {

	/** For serialization. */
	private static final long serialVersionUID = 1L;

	/**
	 * The number of random trees in the ensemble.
	 */
	private int numTrees = 10;

	/** A seed for randomization. */
	private long seed = 1;

	/**
	 * No-argument constructor for xml configuration.
	 */
	public RFPCT() {
		// ClusWrapperClassification expects the clusWorkingDir ends with a final
		// File.separator. For this reason constructor adds a File.separator to the
		// clusWorkingDir
		super("clusFolder" + File.separator, "dataset");
	}

	/**
	 * Constructor.
	 * 
	 * @param clusWorkingDir The directory where all temporary files needed or
	 *                       generated by CLUS library are written.
	 */

	public RFPCT(String clusWorkingDir) {
		// ClusWrapperClassification expects the clusWorkingDir ends with a final
		// File.separator. For this reason constructor adds a File.separator to the
		// clusWorkingDir
		super(clusWorkingDir + File.separator, "dataset");
		this.isEnsemble = true;
		this.numTrees = 10;
		this.seed = 1;
	}

	/**
	 * Constructor.
	 * 
	 * @param clusWorkingDir  The directory where all temporary files needed or
	 *                        generated by CLUS library are written.
	 * @param clusDatasetName The dataset name that will be used for training, test
	 *                        and settings files.
	 * @param numTrees        the number of trees.
	 * @param seed            The seed of random generator.
	 */
	public RFPCT(String clusWorkingDir, String clusDatasetName, int numTrees, long seed) {
		this(clusWorkingDir);
		this.datasetName = clusDatasetName;
		this.numTrees = numTrees;
		this.seed = seed;
	}

	/**
	 * Returns the number of trees in the forest.
	 * 
	 * @return int
	 */
	public int getNumTrees() {
		return numTrees;
	}

	/**
	 * Sets the number of trees in the forest.
	 * 
	 * @param numTrees The number of trees.
	 */
	public void setNumTrees(int numTrees) {
		this.numTrees = numTrees;
	}

	/** Gets the seed used by the random generator. 
	 * @return int*/
	public long getSeed() {
		return seed;
	}

	/**
	 * Sets the seed used by the random generator.
	 * 
	 * @param seed The seed.
	 */
	public void setSeed(long seed) {
		this.seed = seed;
	}

	/** Gets the clus datasetName 
	 * @return String*/
	public String getClusDatasetName() {
		return this.datasetName;

	}

	@Override
	protected void buildInternal(MultiLabelInstances trainingSet) throws Exception {
		super.buildInternal(trainingSet);
		createSettingsFile();
	}

	/**
	 * This method creates a CLUS settings file that corresponds to the MORF
	 * algorithm and writes it in clusWorkingDir.
	 * 
	 * @throws Exception Potential exception thrown. To be handled in an upper
	 *                   level.
	 */
	private void createSettingsFile() throws Exception {
		BufferedWriter out = new BufferedWriter(
				new FileWriter(new File(clusWorkingDir + getClusDatasetName() + "-train.s")));
		out.write("[General]\nVerbose = 0\n");
		out.write("RandomSeed = " + seed + "\n\n[Data]\n");
		out.write("File = " + clusWorkingDir + getClusDatasetName() + "-train.arff" + "\n");
		out.write("TestSet = " + clusWorkingDir + getClusDatasetName() + "-test.arff" + "\n");
		out.write("\n[Attributes]\n");
		out.write("Target = ");
		for (int i = 0; i < numLabels - 1; i++) {// all targets except last
			out.write((labelIndices[i] + 1) + ",");
		}
		out.write((labelIndices[numLabels - 1] + 1) + "\n"); // last target
		out.write("\n");
		out.write("[Ensemble]\nIterations = " + numTrees + "\n");
		out.write("EnsembleMethod = RForest\n\n[Output]\nWritePredictions = Test\n");
		out.close();
	}

}
